<?php

/**
 * @file
 * Contains the implementation for the empty_fields module.
 */

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function empty_fields_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.empty_fields':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a way to show empty fields that would otherwise be hidden.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function empty_fields_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  /** @var \Drupal\empty_fields\EmptyFieldsPluginManager manager */
  $manager = \Drupal::service('plugin.manager.empty_fields');
  $options = ['' => t('Exclude field from output')];
  foreach ($manager->getDefinitions() as $id => $data) {
    $options[$id] = $data['title'];
  }
  $element['handler'] = [
    '#type' => 'select',
    '#title' => t('Empty display options'),
    '#default_value' => $plugin->getThirdPartySetting('empty_fields', 'handler', ''),
    '#options' => $options,
  ];
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function empty_fields_field_formatter_settings_summary_alter(&$summary, $context) {
  if ($handler = $context['formatter']->getThirdPartySetting('empty_fields', 'handler', '')) {
    /** @var \Drupal\Core\Plugin\DefaultPluginManager manager */
    $manager = \Drupal::service('plugin.manager.empty_fields');
    /** @var \Drupal\empty_fields\EmptyFieldPluginInterface $plugin */
    $plugin = $manager->createInstance($handler);
    $summary[] = $plugin->summaryText();
  }
}

/**
 * Implements hook_entity_display_build_alter().
 */
function empty_fields_entity_display_build_alter(&$build, $context) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $context['entity'];
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = $context['display'];
  foreach (Element::children($build) as $field_name) {
    if ($entity->get($field_name)
        ->isEmpty() && ($handler = $display->getRenderer($field_name)
        ->getThirdPartySetting('empty_fields', 'handler'))
    ) {
      /** @var \Drupal\Core\Plugin\DefaultPluginManager manager */
      $manager = \Drupal::service('plugin.manager.empty_fields');
      /** @var \Drupal\empty_fields\EmptyFieldPluginInterface $plugin */
      $plugin = $manager->createInstance($handler);
      /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
      $definition = $entity->get($field_name)->getFieldDefinition();
      $component = $display->getComponent($field_name);

      $build[$field_name] = [
          '#theme' => 'field',
          '#title' => $definition->getLabel(),
          '#label_display' => $component['label'],
          '#view_mode' => $context['view_mode'],
          '#language' => $entity->get($field_name)->getLangcode(),
          '#field_name' => $definition->getName(),
          '#field_type' => 'string',
          '#field_translatable' => $definition->isTranslatable(),
          '#entity_type' => $entity->getEntityTypeId(),
          '#bundle' => $entity->bundle(),
          '#object' => $entity,
          '#items' => [(object) ['_attributes' => []]],
          '#is_multiple' => FALSE,
          // Use simple formatter.
          '#formatter' => 'string',
          '0' => $plugin->react($context),
        ] + $build[$field_name];
    }
  }
}
